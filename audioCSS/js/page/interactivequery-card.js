//#region Card >> Ready

$(document).ready(function () {
    initializeFilter();
});

//#endregion

//#region Card >> Filter

var filter;
var filterHeight;
var filterMarginTop;


 function AdvancePrintPDF() {

     var keyId = 0;

    if (cmbSelectedRow.GetValue()) {
        if (InteractiveGrid.GetSelectedRowCount() > 0) {
            InteractiveGrid.GetSelectedFieldValues(document.getElementById('hdnKeyFieldName').value,OpenSelectedPrint)
            return;
        }
        else {
            keyId = InteractiveGrid.GetRowKey(InteractiveGrid.GetFocusedRowIndex());
        }
    }

    window.open("/GNL/CustomForms/InteractiveQueryForm.aspx?CurrentIdentity=" + CurrentPageCodeInteractive + "&ReportId=" + cmbReportFiles.GetValue() + "&KeyId=" + keyId + "&Print=1");
}

function OpenSelectedPrint(values) {
    window.open("/GNL/CustomForms/InteractiveQueryForm.aspx?CurrentIdentity=" + CurrentPageCodeInteractive + "&ReportId=" + cmbReportFiles.GetValue() + "&KeyId=" + values.toString() + "&Print=1");
}




function initializeFilter() {

    setTimeout(function () {

        var isFilter;
        var marginTop;

        filter = $(".table-filter-search");
        isFilter = filter && filter.find("#TableFilterTd").length > 0 ? true : false;

        if (isFilter) {

            filterHeight = filter.height();
            filterMarginTop = filter.css('margin-top');

            marginTop = "5px";

            filter.css('margin-top', marginTop);
            filter.addClass("active");

        } else {

            $("#btnFilter").css('display', 'none');

        }

    }, 250);

};

function filterClick() {

    if (filter.hasClass("active")) {

        filter.animate({
            marginTop: ((-1 * filterHeight).toString() + "px")
        }, 500);

        filter.removeClass("active");

    } else {

        filter.animate({
            marginTop: filterMarginTop
        }, 500);

        filter.addClass("active");

    }

}

function filterShow() {

    if (!filter.hasClass("active")) {

        filter.animate({
            marginTop: filterMarginTop
        }, 500);

        filter.addClass("active");

    }

}

function filterHide() {

    if (filter.hasClass("active")) {

        filter.animate({
            marginTop: ((-1 * filterHeight).toString() + "px")
        }, 500);

        filter.removeClass("active");

    }

}

//#endregion


var CmdName = '';
var PrmName = '';
var FieldName = '';
var GroupExpandCollapse = false;
var IsPivot = false;

var FilterField = "";
var GridElement;

function InteractiveSendMail(mailForm) {
    var prm = mailForm.To + '|' + mailForm.CC + '|' + mailForm.BCC + '|' + mailForm.Subject + '|' + mailForm.Body;
    InteractiveGrid.PerformCallback('SendMail|' + prm);
}

function getAbsolutePosition(element) {
    var r = { x: element.offsetLeft, y: element.offsetTop };

    if (element.offsetParent) {
        var tmp = getAbsolutePosition(element.offsetParent);

        r.x += tmp.x;
        r.y += tmp.y;
    }

    return r;
};


function MultiReturnSelectedRowValues(values) {
    if (values != null && Array.isArray(values)) {

        for (var i = 0; i < values.length; i++) {
            if (Array.isArray(values[i])) {
                for (var j = 0; j < values[i].length; j++) {
                    if (values[i][j] instanceof Date) {
                        values[i][j] = ConvertDateToStringGlobal(values[i][j]);
                    }
                }
            }
            else {
                if (values[i] instanceof Date) {
                    values[i] = ConvertDateToStringGlobal(values[i]);
                }
            }
        }
        for (var i = 0; i < values.length; i++) {
            if (Array.isArray(values[i])) {
                for (var j = 0; j < values[i].length; j++) {
                    console.log(values[i][j]);
                }
            }
            else {
                console.log(values[i]);
            }
        }
    }

    UyumDialog.Ok(values);
}


function ReturnSelectedRowValues(grid) {
    var values = GetGridAttributeValue(grid, 'ReturnValues').split('|');

    var returnParam = new Array(values.length);

    for (var i = 0; i < values.length; i++) {
        returnParam[i] = values[i].toString();
    }
    UyumDialog.Ok(returnParam);
}

function GetGridAttributeValue(grid, attrName) {
    if (grid.GetFocusedRowIndex() == -1) {
        return -1;
    }
    else {
        return document.getElementById(grid.name + '_DXDataRow' + grid.GetFocusedRowIndex()).getAttribute(attrName);
    }
}

function InteractiveGridExpressionDialog(modalDialog) {
    if (modalDialog != undefined && modalDialog != null) {
        InteractiveGrid.PerformCallback('UymCmd|Expression|' + modalDialog);
    }
}

function OpenInteractivePrepare(grid, itemName) {
    var itemNames = itemName.split('|');
    CmdName = itemNames[0];
    PrmName = itemNames[1];

    if (PrmName.indexOf(';') > -1) {
        var arrFields = [];

        var prmNames = PrmName.split(';');

        for (i = 0; i < prmNames.length; i++) {
            if (prmNames[i].indexOf("@") != -1) {
                var fInx = prmNames[i].indexOf("@");
                var lInx = prmNames[i].indexOf("@", fInx + 1);

                arrFields.push(prmNames[i].substring(fInx + 1, lInx));
            }
        }
        FieldName = arrFields.join(';');
        grid.GetRowValues(grid.GetFocusedRowIndex(), arrFields.join(';'), GetInterActiveGridValues);

    }
    else {

        if (PrmName.indexOf("@") != -1) {

            var fInx = PrmName.indexOf("@");
            var lInx = PrmName.indexOf("@", fInx + 1);

            FieldName = PrmName.substring(fInx + 1, lInx);

            var focusedIndex = grid.GetFocusedRowIndex();

            var rowKeyValue = grid.GetRowKey(grid.GetFocusedRowIndex());

            if (window.DetailGrid && grid == DetailGrid) {
                grid.GetRowValues(grid.GetFocusedRowIndex(), FieldName, GetInterActiveGridValue);
            }
            else {
                grid.GetValuesOnCustomCallback(FieldName + "|" + focusedIndex + "|" + rowKeyValue, GetInterActiveGridValue);
            }

            return;
        }
    }
}

function OpenInteractiveWindow() {

}

function GetInterActiveGridValues(fieldvalues) {
    var fieldNames = FieldName.split(';');
    for (i = 0; i < fieldvalues.length; i++) {
        PrmName = PrmName.replace("@" + fieldNames[i] + "@", fieldvalues[i]);
    }
    PrmName = replaceAll(PrmName, ";", "&");
    var url = CmdName + "&" + PrmName;

    var modalDialog = window.open(url);
}

function GetInterActiveGridValue(fieldvalue) {
    PrmName = PrmName.replace("@" + FieldName + "@", fieldvalue);
    var url = "";
    if (CmdName.toLowerCase().indexOf("aspx") == -1) {
        url = "/GeneralCard.aspx?CommandName=" + CmdName + "&" + PrmName;
    }
    else {
        url = CmdName + "&" + PrmName;
    }
    var modalDialog = window.open(url);
}

function FilterList(s, e, pageCode) {

    console.log(234234234234)
    if (s.GetItemCount() == 0) {
        AjaxStandartCall("LoadFilterString", pageCode, '', ReturnFilterList);
    }
    else {
        s.ShowDropDown();
    }
}

function ReturnFilterList(filterName) {
    var cmbFilter = GetControl('FilterCmb');

    if (filterName == '') {
        alert(LangErr.HRM.NoRecord);
        return;
    }

    var listItems = filterName.split('~~~~');

    for (j = 0; j < listItems.length; j++) {
        var listItem = listItems[j].split('~~~');
        if (listItem.length == 3) {
            cmbFilter.AddItem(listItem[2], listItem[0] + "|||" + listItem[1]);
        }
        else {
            cmbFilter.AddItem(listItem[3], listItem[0] + "|||" + listItem[1] + "|||" + listItem[2]);
        }
    }
    cmbFilter.ShowDropDown();
}

function FilterSave() {
    var ctrlStr = "";

    for (var i = 0; i < document.forms[0].elements.length; i++) {
        var element = document.forms[0].elements[i];
        var ctrlName = element.name;

        switch (element.type) {
            case "text":
                if (ctrlName.length > 11 && ctrlName.substr(0, 11) == "TabControl$") {
                    ctrlName = ctrlName.substr(11);
                }

                if (ctrlName.length > 3 && ctrlName.substr(3, 1) == "_" && element.value != null && element.value != "" && ctrlName.substr(4) != "FilterCmb") {
                    if (ctrlName.substr(0, 4) == "dte_") {
                        var d = GetControl(ctrlName.substr(4)).GetValue();

                        var curr_date = d.getDate();
                        var curr_month = d.getMonth();
                        curr_month++;
                        var curr_year = d.getFullYear();
                        var dateValue = curr_year + "/" + curr_month + "/" + curr_date;

                        ctrlStr += ctrlName.substr(4) + "|" + dateValue + "||";
                    }
                    else {
                        ctrlStr += ctrlName.substr(4) + "|" + GetControlValue(ctrlName.substr(4)) + "||";
                    }
                }
                break;
            case "checkbox":
                ctrlName = element.id.substring(0, element.id.length - 2);
                if (ctrlName.length > 11 && ctrlName.substr(0, 11) == "TabControl_") {
                    ctrlName = ctrlName.substr(11);
                }
                ctrlName = ctrlName.substr(4);

                if (GetControlValue(ctrlName)) {
                    ctrlStr += ctrlName + "|true||";
                }
                break;
        }

    }

    if (ctrlStr.length == 0) {
        ctrlStr = '';
    }

    var desc = prompt(LangInf.APP.EnterNameForFilter, "");

    if (desc == null || desc == "")
        return;


    var pageCode = decodeURIComponent(GetUrlParam("CommandName"));

    if (ctrlStr != '') {
        var filterStr = ctrlStr.substr(0, ctrlStr.length - 2);
    }

    if (IsPivot) {
        var pivotAll = document.getElementById('hdn_PivotAllFields').value;
        var pivot1 = document.getElementById('hdn_PivotFilterFields').value;
        var pivot2 = document.getElementById('hdn_PivotColumnFields').value;
        var pivot3 = document.getElementById('hdn_PivotRowFields').value;
        var pivot4 = document.getElementById('hdn_PivotDataFields').value;
                

        var filterStr2 = SpacePivot(pivotAll) + "|";
        filterStr2 += SpacePivot(pivot1) + "|";
        filterStr2 += SpacePivot(pivot2) + "|";
        filterStr2 += SpacePivot(pivot3) + "|";
        filterStr2 += SpacePivot(pivot4) + "|";
        filterStr2 += document.getElementById('cmbSummaryType').value + "|";

        var cmbSummaryTypeName = '';

        $("#cmbSummaryTypeName option").each(function () {
            var orjValue = $(this).val();
            cmbSummaryTypeName += orjValue + '^^';
        });

        filterStr2 += cmbSummaryTypeName;

        filterStr += "|||" + filterStr2;
    }

    AjaxStandartCall("SaveFilterString", filterStr, desc + "|" + pageCode, ReturnFilterString);
}

function SpacePivot(result) {
    if (result == '')
        return ' ';

    return result;
}


function ReturnFilterString(result) {
    if (result == "") {
        alert(LangInf.GNL.SaveRecord);
    }
    else {
        alert(LangErr.GNL.ErrorOccurred + result);
    }
}

function FilterDelete() {

    var filterCmbValue = GetControlValue('FilterCmb');


    if (filterCmbValue != null && filterCmbValue != '') {
        var filterId = GetControlValue('FilterCmb').split('|||')[0];
        AjaxStandartCall("DeleteFilterString", filterId, '', ReturnDeleteFilter);
    }
    else {
        alert(LangErr.HRM.FilterCanNotBeNull);
    }
}

function ReturnDeleteFilter(result) {
    if (result == "") {
        var filterCmb = GetControl('FilterCmb');
        filterCmb.RemoveItem(filterCmb.GetSelectedIndex());
        SetControlValue('FilterCmb', '');
        alert(LangInf.GNL.DeleteRecord);
    }
    else {
        alert(LangErr.GNL.ErrorOccurred + result);
    }
}

function FilterBind(filterListNameValues) {
    if (filterListNameValues == "")
        return;

    for (var i = 0; i < document.forms[0].elements.length; i++) {
        var element = document.forms[0].elements[i];
        var ctrlName = element.name;

        switch (element.type) {
            case "text":
                if (ctrlName.length > 11 && ctrlName.substr(0, 11) == "TabControl$") {
                    ctrlName = ctrlName.substr(11);
                }

                if (ctrlName.length > 3 && ctrlName.substr(3, 1) == "_" && element.value != null && element.value != "" && ctrlName.substr(4) != "FilterCmb") {
                    var con = GetControl(ctrlName.substr(4));
                    if (con != null) SetControlValue(ctrlName.substr(4), '');
                }
                break;
        }
    }

    var filterListNameValuesItems = filterListNameValues.split('|||');
    var filterNameValues = filterListNameValuesItems[1].split('||');

    for (j = 0; j < filterNameValues.length; j++) {
        var filterNameValue = filterNameValues[j].split('|');
        var con = GetControl(filterNameValue[0]);
        if (con != null) {
            if (con.name.indexOf("dte_") > -1) {
                if (filterNameValue[1] != '') {
                    var dates = filterNameValue[1].split("/");
                    con.SetDate(new Date(dates[0], dates[1] - 1, dates[2], 0, 0, 0, 0));
                }
            }
            else {
                SetControlValue(filterNameValue[0], filterNameValue[1]);
            }
        }
    }

    if (filterListNameValuesItems.length > 2) {

        var allFieldsOld = $("#sortableMain").sortable("toArray").join(';') + ";" + $("#sortable1").sortable("toArray").join(';') + ";" + $("#sortable2").sortable("toArray").join(';') + ";" + $("#sortable3").sortable("toArray").join(';') + ";" + $("#sortable4").sortable("toArray").join(';');
        var allFieldsArrOld = allFieldsOld.split(';');

        var filterListNameValuesItemsItems = filterListNameValuesItems[2].split('|');
        AddPivotcolumn("sortableMain", filterListNameValuesItemsItems[0]);
        AddPivotcolumn("sortable1", filterListNameValuesItemsItems[1]);
        AddPivotcolumn("sortable2", filterListNameValuesItemsItems[2]);
        AddPivotcolumn("sortable3", filterListNameValuesItemsItems[3]);
        AddPivotcolumn("sortable4", filterListNameValuesItemsItems[4]);

        document.getElementById('cmbSummaryType').value = filterListNameValuesItemsItems[5];

        if (filterListNameValuesItemsItems.length==7) {
            var summaryTypeName = filterListNameValuesItemsItems[6].split('^^');

            $('#cmbSummaryTypeName option').each(function () {
                    $(this).remove();
            });


            for (item in summaryTypeName)
            {
                
                $('#cmbSummaryTypeName').append('<option value="' + summaryTypeName[item] + '">' + summaryTypeName[item].split('^')[0] + '</option>'); 
            }
        }
        document.getElementById('cmbSummaryType').value = filterListNameValuesItemsItems[5];

        document.getElementById('hdn_PivotAllFields').value = $("#sortableMain").sortable("toArray").join(';');
        document.getElementById('hdn_PivotFilterFields').value = $("#sortable1").sortable("toArray").join(';');
        document.getElementById('hdn_PivotColumnFields').value = $("#sortable2").sortable("toArray").join(';');
        document.getElementById('hdn_PivotRowFields').value = $("#sortable3").sortable("toArray").join(';');
        document.getElementById('hdn_PivotDataFields').value = $("#sortable4").sortable("toArray").join(';');

        var allFields = $("#sortableMain").sortable("toArray").join(';') + ";" + $("#sortable1").sortable("toArray").join(';') + ";" + $("#sortable2").sortable("toArray").join(';') + ";" + $("#sortable3").sortable("toArray").join(';') + ";" + $("#sortable4").sortable("toArray").join(';');
        var allFieldsArr = allFields.split(';');

        var found = false;
        for (i = 0; i < allFieldsArrOld.length; i++) {
            if (allFieldsArr.indexOf(allFieldsArrOld[i]) == -1) {
                if (filterListNameValuesItemsItems[0] != '') {
                    filterListNameValuesItemsItems[0] += ";";
                }
                filterListNameValuesItemsItems[0] += allFieldsArrOld[i];
                found = true;
            }
        }

        if (found) {
            AddPivotcolumn("sortableMain", filterListNameValuesItemsItems[0]);
            document.getElementById('hdn_PivotAllFields').value = $("#sortableMain").sortable("toArray").join(';');
        }


        var cmbSummaryType = document.getElementById("cmbSummaryType");
        var strSummaryType = cmbSummaryType.options[cmbSummaryType.selectedIndex].value;

        var ctrlSummaryTypeName = document.getElementById("cmbSummaryTypeName");

        var value = '';

        for (i = 0; i < ctrlSummaryTypeName.length; i++) {
            if (ctrlSummaryTypeName.options[i].value.indexOf("^") != -1) {
                value += ctrlSummaryTypeName.options[i].value + '||';
            }
        }

        document.getElementById('hdn_SummaryType').value = value;

        if (window.InteractivePivot) {
            InteractivePivotPanel.PerformCallback('ListAndShow');
        }
    }

}

function AddPivotcolumn(ctrlName, fieldNames) {
    $("#" + ctrlName).empty();

    if (fieldNames == " ")
        return;

    var fieldnameArr = fieldNames.split(';');

    for (var i = 0; i < fieldnameArr.length; i++) {
        $("#" + ctrlName).append("<li id='" + fieldnameArr[i] + "' class='ui-state-default'>" + fieldnameArr[i] + "</li>");
    }
}

function sortMain() {
    var sortableList = $('#sortableMain');
    var listitems = $('li', sortableList);

    listitems.sort(function (a, b) {
        return ($(a).text().toUpperCase() > $(b).text().toUpperCase()) ? 1 : -1;
    });
    sortableList.append(listitems);
}

$(document).ready(function () {
    if (window.acbGridType != undefined) {
        IsPivot = true;

        $("#sortableMain, #sortable1, #sortable2, #sortable3, #sortable4").sortable({
            connectWith: ".connectedSortable",
            cancel: ".ui-state-disabled"
        }).disableSelection();


        $(".connectedSortable").on("sortstop", function (event, ui) {
            ui.item.removeClass('ui-state-highlight');
            AddCmbSummaryTypeName();
            sortMain();
            ShowPivotGrid();
        });

        $(".connectedSortable").on("sortstart", function (event, ui) {
            ui.item.addClass('ui-state-highlight');
        });

        //btnPivotSettings.DoClick();

        //setTimeout(function () { btnSearch.DoClick(); }, 1000);

    }
});


function AddCmbSummaryTypeName() {
    var dataFields = $("#sortable4").sortable("toArray");

    for (item in dataFields) {
        if ($("#cmbSummaryTypeName option[value='" + dataFields[item] + "']").length == 0 && $("#cmbSummaryTypeName option[value^='" + dataFields[item]+"^"+ "']").length == 0) {
            $('#cmbSummaryTypeName').append('<option value="' + dataFields[item] + '">' + dataFields[item]+'</option>'); 
        }
    }

    $("#cmbSummaryTypeName option").each(function () {
        var orjValue = $(this).val();
        var value = orjValue.split('^')[0];
        if (dataFields.indexOf(value)==-1) {
            $("#cmbSummaryTypeName option[value='" + orjValue  + "']").remove();
        }

    });
}

function ShowPivotGrid() {
    document.getElementById('hdn_PivotAllFields').value = $("#sortableMain").sortable("toArray").join(';');
    document.getElementById('hdn_PivotFilterFields').value = $("#sortable1").sortable("toArray").join(';');
    document.getElementById('hdn_PivotColumnFields').value = $("#sortable2").sortable("toArray").join(';');
    document.getElementById('hdn_PivotRowFields').value = $("#sortable3").sortable("toArray").join(';');
    document.getElementById('hdn_PivotDataFields').value = $("#sortable4").sortable("toArray").join(';');

    var ctrlSummaryTypeName = document.getElementById("cmbSummaryTypeName");

    var value = '';

    for (i = 0; i < ctrlSummaryTypeName.length; i++) {
        if (ctrlSummaryTypeName.options[i].value.indexOf("^") != -1) {
            value += ctrlSummaryTypeName.options[i].value + '||';
        }
    }

    document.getElementById('hdn_SummaryType').value = value;

    InteractivePivotPanel.PerformCallback('Show');
}

function OpenPivotSettings() {
    $('#divPivotDialog').dialog({ width: 370, position: { my: 'right-10 top+17', at: 'right-10 top+17', collision: 'fit', of: window } });
}



function ChangeSummaryTypeName(obj, e) {
    var ctrlSummaryType = document.getElementById("cmbSummaryType");

    var ctrlValue = obj.value;
    var ctrlValues = ctrlValue.split('^');

    if (ctrlValues.length == 1) {
        cmbSummaryType.value = "Sum";
    }
    else {
        cmbSummaryType.value = ctrlValues[1];
    }
}


function ChangeSummaryType(obj, e) {
    var ctrlSummaryTypeName = document.getElementById("cmbSummaryTypeName");

    ctrlSummaryTypeName.options[ctrlSummaryTypeName.selectedIndex].value = ctrlSummaryTypeName.value.split('^')[0] + '^' + obj.value;

    ShowPivotGrid();
}

function Interactive_KeyDown(e) {
    if (!e) var e = window.event;


    switch (e.keyCode) {
        case 114: // F3
            {
                if (window.btnSearch) {
                    btnSearch.DoClick();
                }
                break;
            }
    }
}


function SetDateInterval(s, ctrl1, ctrl2) {
    var ctrl1 = 'DocdateF';
    var ctrl2 = 'DocdateL';

    var date = new Date();

    var dValue = s.GetValue();
    if (dValue == 1) {
        SetControlValue(ctrl1, date);
        SetControlValue(ctrl2, date);
    }
    else
        if (dValue == 2) {
            date.setDate(date.getDate() - 1);
            SetControlValue(ctrl1, date);
            SetControlValue(ctrl2, date);
        }
        else
            if (dValue == 3) {
                var day = date.getDay(), diff = date.getDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday
                date = new Date(date.setDate(diff));

                SetControlValue(ctrl1, date);
                date.setDate(date.getDate() + 6);
                SetControlValue(ctrl2, date);
            }
            else
                if (dValue == 4) {
                    var y = date.getFullYear();
                    var m = date.getMonth();
                    var firstDay = new Date(y, m, 1);
                    var lastDay = new Date(y, m + 1, 0);
                    SetControlValue(ctrl1, firstDay);
                    SetControlValue(ctrl2, lastDay);
                }
                else
                    if (dValue == 5) {
                        var y = date.getFullYear();
                        var m = date.getMonth();
                        var firstDay = new Date(y, m - 1, 1);
                        var lastDay = new Date(y, m, 0);
                        SetControlValue(ctrl1, firstDay);
                        SetControlValue(ctrl2, lastDay);
                    }
                    else
                        if (dValue == 6) {
                            var y = date.getFullYear();
                            var m = date.getMonth();
                            var firstDay = new Date(y, 0, 1);
                            var lastDay = new Date(y, 11, 31);
                            SetControlValue(ctrl1, firstDay);
                            SetControlValue(ctrl2, lastDay);
                        }
}