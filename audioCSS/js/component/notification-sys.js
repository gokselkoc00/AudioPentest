var hubProxy = null;

$(function () {

    try {

        var UserData = hdnNotificationSysHub.Get("UserData");
        var IsAttached = hdnNotificationSysHub.Get("IsAttached");

        $.connection.hub.logging = false;

        $.connection.hub.qs = "UserData=" + UserData;

        hubProxy = $.connection.notificationSysHub;

        setTimeout(function () { NotificationStart(); }, 40000);

        $.connection.hub.connectionSlow(function () {

            console.log("Bağlantı çok yavaş");
        });

        var reconnectStatus = false;

        $.connection.hub.reconnecting(function () {

            console.log("SignralR bağlantısı koptu yeniden bağlantı kuruluyor.");

            reconnectStatus = true;

        });

        $.connection.hub.disconnected(function () {

            if ($.connection.hub.lastError) {

                var message = $.connection.hub.lastError.message;

                console.log("Bağlantı koptu. Sebep : " + message);

                if (reconnectStatus && !IsAttached) {

                    CloseOtherPage();

                    Confirm(LangInf.APP.NotConnectionServer, LangErr.APP.NotConnectionServer, null, null, Callback_NotConnectionServer, Callback_NotConnectionServer);
                }
            }

        });

        hubProxy.client.refreshNotifications = function (resultJson, readNotificationAll) {

            var result = JSON.parse(resultJson);

            refreshNotifications(result);

            if (result.IsMultiLoginError) {                                                                 //Çoklu kullanıcı girişi varmı

                Confirm(null, result.MultiLoginError.Message, null, null, Callback_MultiLogin, CallbackCancel_MultiLogin);
            }
            else {

                if (!result.IsAttached) {                                                                    //Koddan çalışmıyorsa onlineuser ekle

                    setTimeout(function () {
                        hubProxy.server.addOnlineUsers();
                    }, 3000);

                }
            }

            if (readNotificationAll != null && readNotificationAll != undefined) {

                var readAll = JSON.parse(readNotificationAll);

                UyumNotifySpecial(readAll.Count + LangInf.APP.NotificationAllReadMessage, null, 1, "MainList.aspx?CommandName=NotificationSysUserCollection.Show&AutoSearch=1", LangInf.APP.AllNotifications, null, 10000, 1);
            }
        };

        hubProxy.client.notifyUser = function (message) {
            alert(message);
        };

        hubProxy.client.readNotification = function () {

        };

        hubProxy.client.refleshOnlineUsers = function () {

            RefleshOnlineUsers();
        };

        hubProxy.client.viewControlLicense = function (resultJson, isComparisonUsers) {

            viewControlLicense(JSON.parse(resultJson), isComparisonUsers);

        };

        hubProxy.client.multiLoginControl = function () {

            AlertUyum(LangErr.APP.ErrorMultiLogin);

            setTimeout(function () {

                console.log("Çok giriş algılandı.");

                CloseOtherPage();

                window.location.href = "login.aspx?sessionstate=logout";

            }, 60000);

        };

        hubProxy.client.controlOnlineUsers = function (resultJson) {

            var result = JSON.parse(resultJson);

            //if (!result.IsAttached) {                                                                       //Koddan çalışmıyorsa onlineuser ekle

            hubProxy.server.addOnlineUsers();
            //}
        };

        hubProxy.client.sessionEndLogout = function (message) {

            Confirm(null, message, null, null, Callback_SessionEndLogout, Callback_SessionEndLogout);

            CloseOtherPage();
        };

        hubProxy.client.pushUyumMessage = function (toUserId, fromUserId) {

            OpenOnlineUsers(toUserId, fromUserId);

        };

        notificationEventSettings();            //İlk event bağlantılarını kurar

    } catch (err) {

        console.log("Hata : Sigral R çalışamadı.Lütfen temp klasörleri temizleyin.");
        console.log(err);
    }

});

function Callback_SessionEndLogout() {

    window.location.href = "login.aspx?sessionstate=logout";
}

function Callback_NotConnectionServer() {

    window.location.href = "login.aspx?sessionstate=logout";
}

function NotificationStart() {

    try {

        $.connection.hub.start().done(function () {

            hubProxy.server.controlLicense();

            reconnectStatus = false;

        }).fail(function (error) {

            if ($.connection.hub.lastError) {

                console.log("Bağlantı hatası : " + $.connection.hub.lastError.message);
            }

            console.log(error);
        });

    } catch (err) {

        console.log("Hata : SigralR bağlantısı yapılamadı.");

        console.log(error);
    }

}

function refreshNotifications(resultJson) {

    var items = resultJson.ItemList;

    items = items || [];

    var cssTransitionEnd = getTransitionEnd();

    var container = $('#notify-container');

    items.forEach(function (item) {

        if (item.NotificationSysStatus === 1) {
            item.isExpired = 0;
        }
        else {
            item.isExpired = 1;
        }

        if (item.Link != '' && item.Link != null) {
            item.isLink = 1;
        }
        else {
            item.isLink = 0;

        }

        item.AddDate = new Date(item.AddDate);

        item.formattedDate = function () {

            return this.AddDate.getFullYear() + '-' +
                strpad(this.AddDate.getMonth() + 1) + '-' +
                strpad(this.AddDate.getDate()) + ' ' +
                timeToString(this.AddDate);
        };
    });

    //Bildirim listesi daha önce eklendi ise sil
    var notificationsElement = document.getElementById("notifications-div");

    if (notificationsElement != null) {

        var oldCount = $('.js-count')[0].attributes['data-count'].value;

        if (oldCount < resultJson.ItemCount) {

            var readCount = resultJson.ItemCount - oldCount;

            ///Sadece okunmamamış yeni gelen bildirimler gösterilir.
            for (var i = 0; i < readCount; i++) {

                var notify = JSON.parse(JSON.stringify(resultJson.ItemList[i]));

                NotifiyBase(notify);
            }
        }

        notificationsElement.remove();
    }

    var template =
        '<div id="notifications-div" class="notifications js-notifications">' +
        '<h3>' + LangInf.APP.Notifications + ' <button type="button" title="' + LangInf.APP.ReadAll + '" class="button-default button-dismiss-all js-dismiss-all"></button></h3>' +
        '<ul class="notifications-list">' +
        '<li class="item no-data">' + LangInf.APP.NotFoundNotifications + '</li>' +
        '{{#items}}' +
        '<li class="item js-item {{#isExpired}}expired{{/isExpired}}" data-notification-sys-id="{{NotificationSysId}}" data-notification-sys-user-id="{{NotificationSysUserId}}">' +
        '<div class="priority priority-img-{{Priority}}"></div>' +
        '<div class="details {{#isLink}}link-div{{/isLink}}" data-notification-link="{{Link}}" data-notification-open-type="{{OpenType}}" {{#isLink}}onclick="ClickDetailsDiv(this)"{{/isLink}}>' +
        '<span class="title">{{Title}}</span>' +
        '<span class="date">{{formattedDate}}</span>' +
        '</div>' +
        '<button type="button" title="Detay" class="button-default button-detail js-detail"></button>' +
        '<button type="button" title="Okundu" class="button-default button-dismiss js-dismiss {{#isExpired}}button-dismiss-read{{/isExpired}} {{^isExpired}}button-dismiss-not-read{{/isExpired}}"></button>' +
        '</li>' +
        '{{/items}}' +
        '</ul>' +
        '<a href="#" class="show-all">' + LangInf.APP.AllNotifications + '</a>' +
        '</div>';

    var countHtml = resultJson.ItemCount;

    if (resultJson.ItemCount > 20) {

        countHtml = "20+";
    }

    container.append(Mustache.render(template, { items: items }))
        .find('.js-count').attr('data-count', resultJson.ItemCount).html(countHtml).end();


    //Hiç bildirim gelmedi ise bildirim yok moduna al
    if (items.length == 0) {
        $(".js-notifications").addClass('empty');

        if (!$(".js-count")[0].classList.contains("empty-count")) {
            $(".js-count").addClass("empty-count");
        }
    }
    else {
        $(".js-count").removeClass("empty-count");
        $(".js-notifications").removeClass("empty");
    }
}

function Callback_MultiLogin() {
    hubProxy.server.multiLoginControl();            //Onay verildi diğer kullanıcı sistemden atılacak
}

function CallbackCancel_MultiLogin() {

    console.log("Onay verilmedi  sonradan giriş yapan kullanıcı login ekranına yönlendirilecek");

    CloseOtherPage();                               //Onay verilmedi  sonradan giriş yapan kullanıcı login ekranına yönlendirilecek

    window.location.href = "login.aspx?sessionstate=logout";
}

function ClickDetailsDiv(div) {

    var link = $(div).find('.link-div').context.attributes['data-notification-link'].value;
    var openType = $(div).find('.link-div').context.attributes['data-notification-open-type'].value;

    if (openType == 1) {

        UyumDialog.Open(link, null, 90, 80);
    }
    else {

        window.open(link);
    }

    var dismissButton = $($(div)[0].parentNode).find('.js-dismiss');

    dismissButton.click();

    $('.js-show-notifications').click();
}

function timeToString(date) {
    if (date) {
        var hh = date.getHours();
        var mm = date.getMinutes();
        //var ap = hh >= 12 ? 'PM' : 'AM';

        //hh = (hh >= 12) ? (hh - 12) : hh;
        //hh = (hh === 0) ? 12 : hh;

        return (hh < 10 ? '0' : '') + hh.toString() + ':' +
            (mm < 10 ? '0' : '') + mm.toString();
    }
    return null;
}

function strpad(num) {
    if (parseInt(num) < 10) {
        return '0' + parseInt(num);
    } else {
        return parseInt(num);
    }
}

function getTransitionEnd() {

    var supportedStyles = window.document.createElement('fake').style;
    var properties = {
        'webkitTransition': { 'end': 'webkitTransitionEnd' },
        'oTransition': { 'end': 'oTransitionEnd' },
        'msTransition': { 'end': 'msTransitionEnd' },
        'transition': { 'end': 'transitionend' }
    };

    var match = null;

    Object.getOwnPropertyNames(properties).forEach(function (name) {
        if (!match && name in supportedStyles) {
            match = name;
            return;
        }
    });

    return (properties[match] || {}).end;
}

function notificationEventSettings() {

    var container = $('#notify-container');
    var cssTransitionEnd = getTransitionEnd();

    container.on('click', '.js-show-notifications', function (event) {

        $(event.currentTarget).closest('.js-show-notifications').toggleClass('active-show').blur();

        return true;

    }).on('click', '.js-dismiss', function (event) {

        dismissNotification(event);

        return true;

    }).on('click', '.js-dismiss-all', function (event) {

        $('.js-show-notifications').click();

        hubProxy.server.readNotificationAll();

        return true;

    }).on('click', '.show-all', function (event) {

        $('.js-show-notifications').click();

        UyumDialog.Open("MainList.aspx?CommandName=NotificationSysUserCollection.Show&AutoSearch=1", null, 90, 80);

        return true;

    }).on('click', '.js-detail', function (event) {

        var item = $(event.currentTarget).parents('.js-item');

        UyumDialog.Open("GeneralCard.aspx?CommandName=NotificationSysUserCollection.Analyze&ObjectId=" + item[0].getAttribute('data-notification-sys-user-id'), null, 90, 80);

        dismissNotification(event);

        return true;

    });

    function dismissNotification(event) {
        var item = $(event.currentTarget).parents('.js-item');

        var removeItem = function () {

            item[0].removeEventListener(cssTransitionEnd, removeItem, false);
            item.remove();

            var countElement = container.find('.js-count');
            var prevCount = +countElement.attr('data-count');
            var newCount = prevCount - 1;

            countElement.attr('data-count', newCount).html(newCount);

            if (newCount == 0) {

                container.find('.js-notifications').addClass('empty');

                if (!$(".js-count")[0].classList.contains("empty-count")) {
                    $(".js-count").addClass("empty-count");
                }
            }
            else {
                $(".js-count").removeClass("empty-count");
            }


            hubProxy.server.readNotification(item[0].getAttribute('data-notification-sys-id'), item[0].getAttribute('data-notification-sys-user-id'));
        };

        item[0].addEventListener(cssTransitionEnd, removeItem, false);

        item.addClass('dismissed');
    }
}

function NotifiyBase(notify) {

    if (notify == undefined || notify == null) {

        return;
    }

    var PositionValue = null;

    if (notify.Position == 1) {
        PositionValue = "bottom|right";
    }
    else if (notify.Position == 2) {
        PositionValue = "bottom|left";
    }
    else if (notify.Position == 3) {
        PositionValue = "top|right";
    }
    else if (notify.Position == 4) {
        PositionValue = "top|left";
    }

    if (notify == undefined || notify == null) {
        return;
    }

    if (notify.Note == null || notify.Note == '') {

        notify.Note = notify.Title;
        notify.Title = null;
    }

    if (notify.Note.length>250) {

        notify.Note = notify.Note.substring(0,250);
    }

    notify.Position = PositionValue

    UyumNotifySpecial(notify.Note, notify.Title, notify.Priority, notify.Link, notify.ButtonTittle, notify.Position, notify.Duration, notify.OpenType);

    for (var i = openedWindowList.length - 1; i >= 0; i--) {

        try {

            if (openedWindowList[i] != null && openedWindowList[i] != undefined && openedWindowList[i].location.href) {

                openedWindowList[i].postMessage(JSON.stringify({ "processName": "NotificationSys", "messageData": notify }), "*");

            }

        } catch (ex) {

            console.log("Hata : Mesaj geçirilemedi.");

            console.log(ex);

            openedWindowList.splice(i, 1);
        }
    }
}

function RefleshOnlineUsers() {

    var onlineChatFrame = $("#iframe-9999998");

    if (onlineChatFrame.length > 0) {

        var aktiveWindow = onlineChatFrame[0].contentWindow;

        aktiveWindow.refreshUsers();
    }
}

function OpenOnlineUsers(toUserId, fromUserId) {

    var onlineChatFrame = $("#iframe-9999998");

    if (onlineChatFrame.length == 0) {

        OnlineUsers();
    }

    setTimeout(function () { RefleshUserMessage(fromUserId) }, 4000);
}

function RefleshUserMessage(fromUserId) {

    var onlineChatFrame = $("#iframe-9999998");

    if (onlineChatFrame.length > 0) {

        var aktiveWindow = onlineChatFrame[0].contentWindow;

        aktiveWindow.GetUserMessage(fromUserId);
    }
}