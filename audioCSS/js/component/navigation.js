Site = {}

Site.Utils = function () {

    var AddClassNameToElement = function (element, className) {
        element.className += " " + className;
    };
    var RemoveClassNameFromElement = function (element, className) {

        element.className = element.className.replace(new RegExp("(?:^|\\s)" + className, 'g'), '');
    };

    var SlideDown = function (element) {
        element.style.height = getHeightOfInvisibleElement(element) + 'px';
    }
    var SlideUp = function (element) {
        element.style.height = '0';
    }

    var CheckInView = function (container, element) {
        var cTop = container.scrollTop;
        var cBottom = cTop + container.clientHeight;
        var eTop = element.offsetTop - parseInt(window.getComputedStyle(element).marginTop);
        var eBottom = eTop + element.clientHeight;
        var result = (eTop >= cTop && eBottom <= cBottom);
        return result;
    }
    var ScrollToElement = function (container, element) {
        container.scrollTop = element != null ? element.offsetTop - parseInt(window.getComputedStyle(element).marginTop) : 0;
    }
    var GetScrollParent = function (node) {
        if (node == null) {
            return null;
        }
        if (window.getComputedStyle(node).overflow === 'auto') {
            return node;
        } else {
            return GetScrollParent(node.parentNode);
        }
    }

    var getHeightOfInvisibleElement = function (element) {
        var clonedElement = element.cloneNode(true);
        element.parentNode.appendChild(clonedElement);
        clonedElement.style.position = 'static';
        clonedElement.style.visibility = 'hidden';
        clonedElement.style.display = 'block';
        clonedElement.style.transition = 'none';
        clonedElement.style.height = 'auto';
        var result = clonedElement.offsetHeight;
        element.parentNode.removeChild(clonedElement);
        return result;
    }

    return {
        AddClassNameToElement: AddClassNameToElement,
        RemoveClassNameFromElement: RemoveClassNameFromElement,
        SlideDown: SlideDown,
        SlideUp: SlideUp,
        CheckInView: CheckInView,
        ScrollToElement: ScrollToElement,
        GetScrollParent: GetScrollParent
    }
}();

Site.Search = function () {

    var SELECTED_NAVBAR_ITEM_CLASS_NAME = '.search-result-item-selected';
    var listenerTimeoutID = null;
    var listenerTimeout = 900;
    var lastText = null;
    var scrollableContainer = null;

    var OnSearchBoxGotFocus = function () {
        if (listenerTimeoutID)
            clearTimeout(listenerTimeoutID);
        listenerTimeoutID = setInterval(function () {
            var text = SearchEditor.GetValue();
            if (lastText !== text) {
                lastText = text;
                doSearch(text);
            }
        }, listenerTimeout);
    }

    var OnSearchBoxLostFocus = function () {
        if (listenerTimeoutID)
            clearTimeout(listenerTimeoutID);
        listenerTimeoutID = null;
        if (window.SearchResultsNavBar && SearchResultsNavBar.GetMainElement())
            SearchResultsNavBar.SetSelectedItem(null);
    }

    var OnSearchEditorKeyDown = function (s, e) {

        if (searchResults.GetMainElement().offsetHeight > 0 && window.SearchResultsNavBar && SearchResultsNavBar.GetMainElement()) {
            if (e.htmlEvent.keyCode == 40 || !e.htmlEvent.shiftKey && e.htmlEvent.keyCode == 9) {
                selectItem(true);
                checkScrollPosition();
                preventEvent(e.htmlEvent);
            }
            else if (e.htmlEvent.keyCode == 38 || e.htmlEvent.shiftKey && e.htmlEvent.keyCode == 9) {
                selectItem(false);
                checkScrollPosition();
                preventEvent(e.htmlEvent);
            }
            else if (e.htmlEvent.keyCode == 13) {
                var selectedItem = SearchResultsNavBar.GetSelectedItem();
                if (selectedItem != null)
                    document.location = selectedItem.GetNavigateUrl();
            }
            else if (e.htmlEvent.keyCode == 27) {
                SearchEditor.SetValue(null);
            }
        }

        if (e.htmlEvent.keyCode == 13) {
            e.htmlEvent.preventDefault();
        }
    }

    var checkScrollPosition = function () {
        var container = getScrollableContainer();
        var selectedElement = document.querySelector(SELECTED_NAVBAR_ITEM_CLASS_NAME);
        if (selectedElement == null || !Site.Utils.CheckInView(container, selectedElement))
            Site.Utils.ScrollToElement(container, selectedElement);
    }

    var getScrollableContainer = function () {
        if (!scrollableContainer)
            scrollableContainer = Site.Utils.GetScrollParent(SearchResultsNavBar.GetMainElement());
        return scrollableContainer;
    }

    var preventEvent = function (evt) {
        if (evt.preventDefault)
            evt.preventDefault();
        else
            evt.returnValue = false;
        return false;
    }

    var selectItem = function (next) {
        var selectedItem = SearchResultsNavBar.GetSelectedItem();
        var group = SearchResultsNavBar.GetGroup(0);

        var newIndex = -1;
        if (selectedItem != null) {
            var selectedIndex = selectedItem.index;
            newIndex = next ? selectedIndex + 1 : selectedIndex - 1;
            if (next && newIndex >= group.GetItemCount())
                newIndex = selectedIndex;
            if (!next && newIndex < 0)
                next = 0;
        }
        else if (next) {
            newIndex = 0
        }

        var itemToSelect = group.GetItem(newIndex);
        SearchResultsNavBar.SetSelectedItem(itemToSelect);
    }

    var OnEndCallback = function () {
        setContainerVisiblity(true);
        if (window.SearchResultsNavBar)
            SearchResultsNavBar.SetSelectedItem(null);
    }

    var doSearch = function (text) {
        if (text && text.length > 2) {
            searchResults.PerformCallback(text);
        }
        else
            setContainerVisiblity(false);
    }

    var setContainerVisiblity = function (visible) {
        var element = searchResults.GetMainElement();
        var containerElement = document.querySelector(".search-wrapper");
        if (visible) {
            Site.Utils.SlideDown(element);
        }
        else {
            Site.Utils.SlideUp(element);
        }
    }

    return {
        OnSearchBoxGotFocus: OnSearchBoxGotFocus,
        OnSearchBoxLostFocus: OnSearchBoxLostFocus,
        OnSearchEditorKeyDown: OnSearchEditorKeyDown,
        OnEndCallback: OnEndCallback,
    }
}();

Site.Nav = function () {

    var ToggleNavigationPanel = function () {

        var leftPanel = splHome.GetPane(0);
        var rightPanel = splHome.GetPane(1);

        if (leftPanel.collapsed) {
            leftPanel.Expand(rightPanel);
        } else {
            leftPanel.Collapse(rightPanel);
        }

    };

    var NavigationControl = function (treeViewInstance, breadCrumbsButtonInstance, wrapperElementId, breadCrumbsTextElementId) {

        this.ALL_DEMOS_TEXT = LangInf.APP.Menu;
        this.BREAD_CRUMBS_BUTTON_FORVARD_CLASS_NAME = 'arrow-right';
        this.BREAD_CRUMBS_BUTTON_BACKWARD_CLASS_NAME = 'arrow-left';
        this.ROOT_SUBRTEE_MAKRER_CLASS_NAME = 'root-sub-tree';
        this.LIST_ITEM_HOVERED_CLASS_NAME = 'hovered';

        this.treeView = treeViewInstance;
        this.breadCrumbsButton = breadCrumbsButtonInstance;
        this.wrapperElement = document.getElementById(wrapperElementId);
        this.breadText = document.getElementById(breadCrumbsTextElementId);

        this.rootTree = null;
        this.subTree = null;
        this.isRootTreeDisplayed = true;
        this.isMoving = false;
        this.selectedNode = null;

        this.isFindNodeCustom = false;
        this.gotoNodePath = new Array();

        this.isSubTree = false;

        this.Init = function () {

            this.setSelectedClassToListItems();
            this.addHoverHandlersToListItems();
            this.goToSelectedProductSubTree(true);
            this.wrapperElement.style.visibility = '';
            this.treeView.NodeClick.AddHandler(this.nodeClickHandler.bind(this));
        }

        this.nodeClickHandler = function (s, e) {

            if (!e.node.navigateUrl || e.node.navigateUrl === ASPx.AccessibilityEmptyUrl) {

                e.node.SetExpanded(!e.node.GetExpanded());


                //if (e.node.parent) {

                //    e.node.SetExpanded(!e.node.GetExpanded());
                //}
                //else {

                //    this.gotToSubTree(e.node);                  
                //}
            }
            else {

                this.setClickedMenuClass(e.htmlElement);
            }

            if (e.event) {
                e.event.stopPropagation();
            }

            this.selectedNode = e.node;

            //Tıklanan menüyü kaydırır
            if (e.node.nodes != null && e.node.nodes.length > 0) {

                var clickElement = $('#' + e.node.contentElementID)[0];

                var bottomNode = e.node.nodes[e.node.nodes.length - 1];

                var bottomElement = $('#' + bottomNode.contentElementID)[0];

                var treeElement = $('#splHome_0')[0];

                var containerScroll = $('#splHome_0i0_CC');

                if (bottomElement.offsetTop > treeElement.offsetHeight + containerScroll[0].scrollTop - 150) {

                    containerScroll.animate({ scrollTop: clickElement.offsetTop }, 750);
                }

                ps.update(containerScroll);
            }

        }

        this.setClickedMenuClass = function (clickedElement) {
            $(".dxtv-nd").removeClass("clicked_menu_a")
            clickedElement.className += ' clicked_menu_a';

            $(".dxtv-ndTxt").removeClass("clicked_menu_a_span")
            clickedElement.childNodes[0].className += ' clicked_menu_a_span';

            $(".dxtv-subnd").removeClass("clicked_menu_li")
            clickedElement.parentElement.className += ' clicked_menu_li';

            $(".dxtv-elbNoLn").removeClass("clicked_menu_span")
            clickedElement.parentElement.childNodes[0].className += ' clicked_menu_span';
        }


        this.getSelectedNode = function () {
            return this.selectedNode;
        }

        this.onNavigationBreadCrumbsButtonClick = function () {
            if (this.isRootTreeDisplayed)
                this.goToSelectedProductSubTree(false);
            else
                this.goToRoot();
        }

        this.goToSelectedProductSubTree = function (quick) {
            var selectedNodeParent = this.getSelectedProductNode();
            if (!selectedNodeParent)
                return;
            this.gotToSubTree(selectedNodeParent, quick);
        }

        this.setSelectedClassToListItems = function () {

            var node = this.getSelectedNode();

            while (node != null) {

                var listItemParentNode = null;
                var listItemElement = node.GetHtmlElement();

                if (listItemElement) {

                    listItemParentNode = listItemElement.parentNode;
                    Site.Utils.AddClassNameToElement(listItemParentNode, 'selected');

                }

                node = node.parent;

            }

        }

        this.getSelectedProductNode = function () {

            var node = this.getSelectedNode();

            while (node != null && node.parent != null) {
                node = node.parent;
            }

            return node;

        }

        this.gotToSubTree = function (targetNode, quick) {

            if (this.isMoving)
                return;

            this.isSubTree = true;
            this.isMoving = true;
            this.setBreadCrumbsText(targetNode.text);
            this.breadCrumbsButton.SetText(this.ALL_DEMOS_TEXT);

            this.toggleBreadCrumbsButtonState();

            this.parent = targetNode.GetHtmlElement().parentNode;
            this.subTree = this.parent.getElementsByTagName('UL')[0];
            this.rootTree = this.parent.parentNode;

            var contentDiv = this.treeView.GetControlContentDiv();
            var mainElement = this.treeView.GetMainElement();

            mainElement.style.overflow = 'hidden';

            var savedWidth = contentDiv.style.width;
            contentDiv.style.width = contentDiv.offsetWidth + 'px';

            this.startAnimation(contentDiv, 0, -contentDiv.offsetWidth, function () {

                try {

                    contentDiv.removeChild(this.rootTree);
                    contentDiv.appendChild(this.subTree);
                    this.subTree.style.display = '';
                    mainElement.style.overflow = 'hidden';
                    contentDiv.style.marginLeft = (parseInt(contentDiv.style.marginLeft) * -1) + 'px';
                    Site.Utils.RemoveClassNameFromElement(mainElement, this.ROOT_SUBRTEE_MAKRER_CLASS_NAME);

                    ps.update();

                    this.startAnimation(contentDiv, contentDiv.offsetWidth, 0, function () {

                        try {

                            contentDiv.style.width = savedWidth;
                            this.isRootTreeDisplayed = false;
                            this.isMoving = false;

                        } catch (err) {

                            console.log(err);

                            confirm("Menüde hata oluştu, sayfayı yeniden yüklemek istermisiniz?", null, ReloadPage);
                        }

                    }.bind(this), quick);

                } catch (err) {

                    console.log(err);

                    confirm("Menüde hata oluştu, sayfayı yeniden yüklemek istermisiniz?", null, ReloadPage);
                }

            }.bind(this), quick);

        }

        this.goToRoot = function () {

            try {

                if (this.isMoving) {
                    return;
                }

                if (!this.getSelectedProductNode()) {

                    return;
                }

                this.isMoving = true;
                var mainElement = this.treeView.GetMainElement();
                var contentDiv = this.treeView.GetControlContentDiv();
                this.breadCrumbsButton.SetText(this.getSelectedProductNode().text);
                this.toggleBreadCrumbsButtonState();

                this.setBreadCrumbsText(this.ALL_DEMOS_TEXT);

                mainElement.style.overflow = 'hidden';

                var savedWidth = contentDiv.style.width;
                contentDiv.style.width = contentDiv.offsetWidth + 'px';

                this.startAnimation(contentDiv, 0, contentDiv.offsetWidth, function () {

                    try {

                        mainElement.style.overflow = '';
                        contentDiv.removeChild(this.subTree);
                        contentDiv.appendChild(this.rootTree);
                        this.parent.appendChild(this.subTree);
                        this.subTree.style.display = 'none';
                        contentDiv.style.marginLeft = -contentDiv.offsetWidth + 'px';
                        Site.Utils.AddClassNameToElement(this.treeView.GetMainElement(), this.ROOT_SUBRTEE_MAKRER_CLASS_NAME);
                        this.startAnimation(contentDiv, -contentDiv.offsetWidth, 0, function () {
                            contentDiv.style.width = savedWidth;
                            this.isRootTreeDisplayed = true;
                            this.isMoving = false;
                        }.bind(this));

                    } catch (err) {

                        console.log(err);

                        confirm("Menüde hata oluştu, sayfayı yeniden yüklemek istermisiniz?", null, ReloadPage);
                    }

                }.bind(this));

                this.isSubTree = false;

            } catch (err) {

                console.log(err);

                confirm("Menüde hata oluştu, sayfayı yeniden yüklemek istermisiniz?", null, ReloadPage);
            }
        }

        function ReloadPage() {

            location.reload();
        }

        this.startAnimation = function (element, start, end, onComplete, quick) {

            try {
                var duractionMs = 200;
                var savedTransition = element.style.transition;
                if (!quick) {
                    element.style.marginLeft = start + 'px';
                    element.style.transition = 'margin-left ' + duractionMs / 1000 + 's';
                }
                element.style.marginLeft = end + 'px';
                if (quick)
                    onComplete();
                else
                    setTimeout(function () {
                        element.style.transition = savedTransition;
                        onComplete();
                    }, duractionMs);
            }
            catch (err) {

                console.log(err);

                confirm("Menüde hata oluştu, sayfayı yeniden yüklemek istermisiniz?", null, ReloadPage);
            }
        }

        this.setBreadCrumbsText = function (text) {
            this.breadText.innerHTML = text;
        }

        this.toggleBreadCrumbsButtonState = function () {
            var element = this.breadCrumbsButton.GetMainElement().getElementsByClassName("icon")[0];
            var oldCssClass = this.isRootTreeDisplayed ? this.BREAD_CRUMBS_BUTTON_FORVARD_CLASS_NAME : this.BREAD_CRUMBS_BUTTON_BACKWARD_CLASS_NAME;
            var newCssClass = this.isRootTreeDisplayed ? this.BREAD_CRUMBS_BUTTON_BACKWARD_CLASS_NAME : this.BREAD_CRUMBS_BUTTON_FORVARD_CLASS_NAME;
            Site.Utils.RemoveClassNameFromElement(element, oldCssClass);
            Site.Utils.AddClassNameToElement(element, newCssClass);
        }

        this.addHoverHandlersToListItems = function () {
            this.forEachNode(this.treeView, function (node) {
                this.attachHoverHandlers(node);
            }.bind(this));
        }

        this.forEachNode = function (nodeOrTreeView, callback) {
            if (nodeOrTreeView instanceof ASPxClientTreeViewNode)
                callback(nodeOrTreeView);
            var nodesCount = nodeOrTreeView.GetNodeCount();
            for (var i = 0; i < nodesCount; i++) {
                this.forEachNode(nodeOrTreeView.GetNode(i), callback);
            }
        }

        this.attachHoverHandlers = function (node) {
            var listItem = node.GetHtmlElement().parentNode;
            var childElements = listItem.childNodes;
            for (var i = 0; i < childElements.length; i++) {
                var element = childElements[i];
                if (element.tagName === 'UL')
                    continue;

                var onMouseEnter = function () {
                    if (listItem.className.indexOf(this.LIST_ITEM_HOVERED_CLASS_NAME) == -1)
                        Site.Utils.AddClassNameToElement(listItem, this.LIST_ITEM_HOVERED_CLASS_NAME);
                };

                var onMouseLeave = function () {
                    Site.Utils.RemoveClassNameFromElement(listItem, this.LIST_ITEM_HOVERED_CLASS_NAME);
                };

                element.addEventListener('mouseenter', onMouseEnter.bind(this));
                element.addEventListener('mouseleave', onMouseLeave.bind(this));
            }
        }


        this.findNodeCustom = function (MenuId) {

            this.isFindNodeCustom = false;

            for (var i = 0; i < this.treeView.GetNodeCount(); i++) {

                if (this.treeView.GetNode(i).name != 'Favorite' && this.treeView.GetNode(i).name != 'CustomMenu') {

                    this.recursiveFind(this.treeView.GetNode(i), MenuId);

                }

            }
        }

        this.recursiveFind = function (node, MenuId) {

            if (this.isFindNodeCustom) {
                return;
            }

            for (var i = 0; i < node.nodes.length; i++) {

                if (node.nodes[i].navigateUrl.includes("'" + MenuId + "'")) {

                    this.isFindNodeCustom = true;

                    this.gotoNodePath = new Array();

                    this.gotoNodePath.push(node.nodes[i]);

                    this.gotoNode(node.nodes[i]);

                }
                else {

                    this.recursiveFind(node.nodes[i], MenuId);
                }
            }
        }

        this.gotoNode = function (targetNode) {

            if (!targetNode.parent) {

                var reversGotoNodePath = this.gotoNodePath.reverse();

                var selectedProductNode = this.getSelectedProductNode();

                var timeOut = 0;

                if (selectedProductNode) {

                    if (reversGotoNodePath[0].contentElementID != selectedProductNode.contentElementID) {

                        timeOut = 100;

                        if (this.isSubTree) {

                            setTimeout(function () {

                                NavControl.goToRoot();

                            });
                        }
                    }
                    else {

                        if (!selectedProductNode.parent) {

                            if (this.isSubTree) {

                                reversGotoNodePath[1].SetExpanded(true);
                            }
                            else {
                                reversGotoNodePath[0].SetExpanded(true);
                            }
                        }
                        else {

                            this.gotToSubTree(selectedProductNode);
                        }
                    }
                }

                setTimeout(function () {

                    for (var i = 0; i < reversGotoNodePath.length; i++) {

                        if (!reversGotoNodePath[i].navigateUrl || reversGotoNodePath[i].navigateUrl === ASPx.AccessibilityEmptyUrl) {

                            reversGotoNodePath[i].SetExpanded(true);
                        }
                    }

                }, timeOut + 100);



                setTimeout(function () {                                                                    /// İlgili menüye focuslandıktan sonra kaydırma işlemi yapılır.

                    var customSelectedNode = reversGotoNodePath[reversGotoNodePath.length - 1]

                    var customSelectedElement = $('#' + customSelectedNode.contentElementID)[0];

                    customSelectedElement.click();

                    NavControl.selectedNode = customSelectedNode;

                    var containerScroll = $('#splHome_0i0_CC');

                    containerScroll.animate({ scrollTop: customSelectedElement.offsetTop }, 1000);

                    ps.update(containerScroll);

                }, timeOut + 250);

            }
            else {

                this.gotoNodePath.push(targetNode.parent);

                this.gotoNode(targetNode.parent);
            }
        }

        this.scrollTopCustom = function () {

            var containerScroll = $('#splHome_0i0_CC');

            containerScroll.animate({ scrollTop: 0 }, 1000);

            ps.update(containerScroll);
        }


        this.collapseAllNode = function () {

            var parentNode = this.getSelectedProductNode();

            this.recursiveCollapse(parentNode)                                                              //Önce üzerinde bulunana klasörü kapat

            for (var i = 0; i < this.treeView.GetNodeCount(); i++) {                                        //Sonra diğer klasörleri de kapat

                if (this.treeView.GetNode(i).parent == null) {

                    this.recursiveCollapse(this.treeView.GetNode(i))
                }
            }

            this.scrollTopCustom();
        }

        this.recursiveCollapse = function (node) {

            if (!node) {
                return;
            }

            setTimeout(function () {

                node.SetExpanded(false);

                for (var i = 0; i < node.nodes.length; i++) {

                    if (!node.nodes[i].navigateUrl) {

                        node.nodes[i].SetExpanded(false);

                        NavControl.recursiveCollapse(node.nodes[i]);
                    }
                }

            });

        }

        this.expandAllNode = function () {

            var parentNode = this.getSelectedProductNode();

            this.recursiveExpand(parentNode)

        }

        this.recursiveExpand = function (node) {

            if (!node) {
                return;
            }

            setTimeout(function () {

                for (var i = 0; i < node.nodes.length; i++) {

                    if (!node.nodes[i].navigateUrl) {

                        node.nodes[i].SetExpanded(true);

                        NavControl.recursiveExpand(node.nodes[i]);
                    }
                }

            });

        }

        this.returnHome = function () {

            if (this.isSubTree) {

                this.goToRoot();
            }

            this.scrollTopCustom();
        }

    }

    return {
        ToggleNavigationPanel: ToggleNavigationPanel,
        NavigationControl: NavigationControl
    }

}();

///Sağ açılır panel
Site.Setting = function () {

    var ToggleSettingsPanel = function () {

        var iframeLoaderOpacity = $("#app-iframe-loader").css("opacity");

        if (!window.SettingsPanel || iframeLoaderOpacity > 0)
            return;

        if (!SettingsPanel.IsExpanded())
            moveControlSectionToBackground();

        document.querySelector(".right-button-toggle-settings-panel").setAttribute("aria-pressed", !SettingsPanel.IsExpanded());

        SettingsPanel.Toggle();

    };

    function moveControlSectionToBackground() {

        var controlSection = document.getElementsByClassName("control-section")[0];

        ASPx.AddClassNameToElement(controlSection, "background");

    };

    return {
        ToggleSettingsPanel: ToggleSettingsPanel
    }

}();

//#region Home >> TreeView PopupMenü

function treeView_OnInit(s, e) {

    ProcessNode(s.GetRootNode());

}

function ProcessNode(node) {

    if (!node) {
        return;
    }

    var htmlElement = node.GetHtmlElement();
    var count = node.GetNodeCount();

    if (htmlElement != null) {

        var handler = function (evt) {

            mnu_TreeViewMenu_ToggleItemsVisibility(count > 0, node);

            mnu_TreeViewMenu.cpClickedNode = node;
            mnu_TreeViewMenu.ShowAtElement(node.GetHtmlElement());

            ASPxClientUtils.PreventEventAndBubble(evt);
        };

        ASPxClientUtils.AttachEventToElement(htmlElement, "contextmenu", handler);
    }

    for (var i = 0; i < count; i++)

        ProcessNode(node.GetNode(i));
}

function mnu_TreeViewMenu_ToggleItemsVisibility(isParent, node) {

    mnu_TreeViewMenu.GetItemByName("itmExpandCollapse").SetVisible(isParent);
    mnu_TreeViewMenu.GetItemByName("itmAddUserMenu").SetVisible(!isParent);
    mnu_TreeViewMenu.GetItemByName("itmAddFavorite").SetVisible(!isParent);
    mnu_TreeViewMenu.GetItemByName("itmOpenNewTab").SetVisible(!isParent);

    if (node.parent && node.parent.name == "Favorite") {

        mnu_TreeViewMenu.GetItemByName("itmDeleteFavorite").SetVisible(true);
        mnu_TreeViewMenu.GetItemByName("itmAddFavorite").SetVisible(false);
        mnu_TreeViewMenu.GetItemByName("itmAddUserMenu").SetVisible(false);
    }
    else {
        mnu_TreeViewMenu.GetItemByName("itmDeleteFavorite").SetVisible(false);
    }
}

function mnu_TreeViewMenu_OnPopUp(s, e) {
    s.GetItemByName("itmExpandCollapse").SetText(s.cpClickedNode.GetExpanded() ? "Daralt" : "Genişlet");
}

function mnu_TreeViewMenu_OnItemClick(s, e) {

    var menuParams = s.cpClickedNode.navigateUrl.split('\'');

    if (e.item.name == "itmExpandCollapse")
        s.cpClickedNode.SetExpanded(!s.cpClickedNode.GetExpanded());

    if (e.item.name == "itmAddUserMenu") {

        var mnuId = menuParams[1];

        var urlName = 'XMLCard.aspx?CommandName=UserMenuCollection.Show&MenuId=' + mnuId;

        UyumDialog.Open(urlName, AddUserMenu_Callback, 35, 80);
    }

    if (e.item.name == "itmOpenNewTab") {

        OpenNewTab(menuParams[5]);
    }

    if (e.item.name == "itmAddFavorite") {

        popAddFovorite.Show();

        setTimeout(function () {
            txtAddFovoriteShortMenuName.SetText(menuParams[3]);
            hdnAddFovoriteMenuId.Set('hidden_value', menuParams[1]);
        }, 10);

    }

    if (e.item.name == "itmDeleteFavorite") {

        DeleteFavoriteMenu(menuParams[1]);
    }
}

function AddUserMenu_Callback() {
    //location.reload();
}

function OpenNewTab(url) {
    window.open(url);
}

function InsertFavoriteMenu() {

    AjaxStandartCall("InsertFavoriteMenu", spnAddFovoriteShortCut.GetValue() + '|' + hdnAddFovoriteMenuId.Get('hidden_value'), '', InsertFavoriteMenu_Callback);
}

function InsertFavoriteMenu_Callback() {

    spnAddFovoriteShortCut.SetValue(1);

    popAddFovorite.Hide();

    location.reload();
}

function DeleteFavoriteMenu(mnuId) {

    AjaxStandartCall("DeleteFavoriteMenu", mnuId, '', DeleteFavoriteMenu_Callback);
}

function DeleteFavoriteMenu_Callback() {

    location.reload();
}

//#endregion

function CollapseAll() {

    NavControl.collapseAllNode();
}

function ExpanAll() {

    NavControl.expandAllNode();
}

function FocusOpenWindow() {

    var target = $(".main-iframe.active");
    var targetId = target ? target.attr('id') : null;

    if (!targetId)
        return false;

    NavControl.findNodeCustom(targetId.split('-')[1]);
}

function OpenMenuWithTargetId(targetId) {
    NavControl.findNodeCustom(targetId);
}